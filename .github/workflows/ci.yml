name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust: [stable, beta, nightly]
        features: [default, server, websocket, webtransport, sse, compression, metrics, auth, advanced-rpc, zero-copy]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build with features
      run: cargo build --features ${{ matrix.features }} --verbose

    - name: Run tests
      run: cargo test --features ${{ matrix.features }} --verbose

    - name: Run nextest (if available)
      run: |
        if cargo nextest --version >/dev/null 2>&1; then
          cargo nextest run --features ${{ matrix.features }}
        else
          echo "cargo nextest not available, using regular test"
        fi
      continue-on-error: true

  build:
    name: Build All Features
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build all feature combinations
      run: |
        # Build with all features
        cargo build --all-features --verbose

        # Build with no features
        cargo build --no-default-features --verbose

        # Build with individual features
        for feature in server websocket webtransport sse compression metrics auth advanced-rpc zero-copy; do
          echo "Building with feature: $feature"
          cargo build --features $feature --verbose
        done

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rust-docs

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build documentation
      run: cargo doc --all-features --no-deps

    - name: Check documentation links
      run: cargo doc --all-features --no-deps --document-private-items

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Run coverage
      run: cargo tarpaulin --features server --out Html --output-dir coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/tarpaulin-report.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
