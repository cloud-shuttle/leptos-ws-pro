# Contract Testing Configuration
# This file defines the contract testing strategy and requirements

contract_testing:
  # Schema validation settings
  schema_validation:
    enabled: true
    strict_mode: true
    validate_required_fields: true
    validate_enum_values: true
    validate_format: true
    validate_patterns: true

  # API contract validation
  api_contract:
    enabled: true
    validate_endpoints: true
    validate_request_schemas: true
    validate_response_schemas: true
    validate_error_responses: true
    validate_http_status_codes: true

  # Backward compatibility testing
  backward_compatibility:
    enabled: true
    supported_versions:
      - "1.0.0"
      - "1.0.1"
      - "1.1.0"
    deprecated_features:
      - name: "old_message_format"
        deprecated_in: "1.0.0"
        removed_in: "2.0.0"
        replacement: "json or rkyv message types"
      - name: "legacy_rpc_methods"
        deprecated_in: "1.0.0"
        removed_in: "2.0.0"
        replacement: "standard RPC methods"
    breaking_changes:
      - version: "2.0.0"
        description: "Major API redesign"
        migration_guide: "docs/migration/v2.0.0.md"

  # Performance contract testing
  performance:
    enabled: true
    latency_requirements:
      connection_establishment: 100  # milliseconds
      message_round_trip: 50        # milliseconds
      rpc_response: 100             # milliseconds
    throughput_requirements:
      messages_per_second: 1000
      concurrent_connections: 1000
    reliability_requirements:
      uptime_percentage: 99.9
      error_rate_percentage: 0.1
      reconnection_success_rate: 95

  # Security contract testing
  security:
    enabled: true
    authentication_required: true
    encryption_required: true
    rate_limiting_enabled: true
    input_validation_required: true
    cors_policy_required: true

  # Test data generation
  test_data:
    enabled: true
    generate_valid_data: true
    generate_invalid_data: true
    generate_edge_cases: true
    generate_large_payloads: true
    generate_unicode_data: true

  # Mock server configuration
  mock_server:
    enabled: true
    port: 8080
    ssl_enabled: false
    response_delay: 0  # milliseconds
    error_injection:
      enabled: false
      error_rate: 0.0
      error_types:
        - "connection_timeout"
        - "server_error"
        - "rate_limit_exceeded"

  # Contract testing tools
  tools:
    schema_validator: "jsonschema"
    api_validator: "openapi-validator"
    mock_server: "wiremock"
    contract_testing: "pact"
    performance_testing: "k6"

  # Test execution
  execution:
    parallel_tests: true
    test_timeout: 300  # seconds
    retry_failed_tests: 3
    generate_reports: true
    report_formats:
      - "json"
      - "html"
      - "junit"

  # CI/CD integration
  ci_cd:
    enabled: true
    run_on_pr: true
    run_on_merge: true
    fail_on_contract_violation: true
    notify_on_failure: true
    slack_webhook: "${SLACK_WEBHOOK_URL}"

  # Contract evolution
  evolution:
    allow_new_fields: true
    allow_new_endpoints: true
    allow_new_optional_fields: true
    require_deprecation_notice: true
    deprecation_notice_period: "6 months"
    breaking_change_notice_period: "12 months"

# Test scenarios
test_scenarios:
  - name: "basic_websocket_connection"
    description: "Test basic WebSocket connection establishment"
    steps:
      - connect_to_websocket
      - verify_connection_state
      - send_heartbeat
      - disconnect

  - name: "rpc_method_calls"
    description: "Test all RPC method calls"
    steps:
      - connect_to_websocket
      - call_send_message
      - call_get_messages
      - call_subscribe_messages
      - call_get_connection_state
      - call_heartbeat
      - call_ping

  - name: "error_handling"
    description: "Test error handling scenarios"
    steps:
      - test_invalid_parameters
      - test_missing_required_fields
      - test_invalid_message_types
      - test_connection_failures
      - test_timeout_scenarios

  - name: "performance_requirements"
    description: "Test performance requirements"
    steps:
      - test_connection_latency
      - test_message_throughput
      - test_concurrent_connections
      - test_memory_usage
      - test_cpu_usage

  - name: "backward_compatibility"
    description: "Test backward compatibility"
    steps:
      - test_old_client_versions
      - test_deprecated_features
      - test_migration_paths
      - test_breaking_changes

# Contract validation rules
validation_rules:
  schema:
    - "All required fields must be present"
    - "All enum values must be valid"
    - "All format validations must pass"
    - "All pattern validations must pass"
    - "All type validations must pass"

  api:
    - "All endpoints must be documented"
    - "All request schemas must be valid"
    - "All response schemas must be valid"
    - "All error responses must be documented"
    - "All HTTP status codes must be valid"

  compatibility:
    - "No breaking changes in minor versions"
    - "Deprecated features must have replacements"
    - "Migration guides must be provided"
    - "Backward compatibility must be maintained"

  performance:
    - "Latency requirements must be met"
    - "Throughput requirements must be met"
    - "Reliability requirements must be met"
    - "Resource usage must be within limits"

  security:
    - "Authentication must be required"
    - "Encryption must be enabled"
    - "Rate limiting must be implemented"
    - "Input validation must be performed"
